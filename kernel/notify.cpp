/*===========================================================================
     _____        _____        _____        _____
 ___|    _|__  __|_    |__  __|__   |__  __| __  |__  ______
|    \  /  | ||    \      ||     |     ||  |/ /     ||___   |
|     \/   | ||     \     ||     \     ||     \     ||___   |
|__/\__/|__|_||__|\__\  __||__|\__\  __||__|\__\  __||______|
    |_____|      |_____|      |_____|      |_____|

--[Mark3 Realtime Platform]--------------------------------------------------

Copyright (c) 2012 - 2017 Funkenstein Software Consulting, all rights reserved.
See license.txt for more information
===========================================================================*/
/*!

    \file   notify.cpp

    \brief  Lightweight thread notification - blocking object

*/

#include "mark3cfg.h"
#include "notify.h"
#include "mark3.h"
#include "kerneldebug.h"

#define _CAN_HAS_DEBUG
//--[Autogenerated - Do Not Modify]------------------------------------------
#include "dbg_file_list.h"
#include "buffalogger.h"
#if defined(DBG_FILE)
#error "Debug logging file token already defined!  Bailing."
#else
#define DBG_FILE _DBG___KERNEL_NOTIFY_CPP
#endif
//--[End Autogenerated content]----------------------------------------------

#if KERNEL_USE_NOTIFY

#if KERNEL_USE_TIMEOUTS
//---------------------------------------------------------------------------
void TimedNotify_Callback(Thread* pclOwner_, void* pvData_)
{
    Notify* pclNotify = static_cast<Notify*>(pvData_);

    // Indicate that the semaphore has expired on the thread
    pclOwner_->SetExpired(true);

    // Wake up the thread that was blocked on this semaphore.
    pclNotify->WakeMe(pclOwner_);

    if (pclOwner_->GetCurPriority() >= Scheduler::GetCurrentThread()->GetCurPriority()) {
        Thread::Yield();
    }
}
#endif
//---------------------------------------------------------------------------
Notify::~Notify()
{
    // If there are any threads waiting on this object when it goes out
    // of scope, set a kernel panic.
    if (m_clBlockList.GetHead()) {
        Kernel::Panic(PANIC_ACTIVE_NOTIFY_DESCOPED);
    }
}

//---------------------------------------------------------------------------
void Notify::Init(void)
{
#if KERNEL_EXTRA_CHECKS
    KERNEL_ASSERT(!m_clBlockList.GetHead());
    SetInitialized();
#endif
    m_bPending = false;
}

//---------------------------------------------------------------------------
void Notify::Signal(void)
{
#if KERNEL_EXTRA_CHECKS
    KERNEL_ASSERT(IsInitialized());
#endif

    bool bReschedule = false;

    CS_ENTER();
    Thread* pclCurrent = (Thread*)m_clBlockList.GetHead();
    if (!pclCurrent) {
        m_bPending = true;
    } else {
        while (pclCurrent != NULL) {
            UnBlock(pclCurrent);
            if (!bReschedule && (pclCurrent->GetCurPriority() >= Scheduler::GetCurrentThread()->GetCurPriority())) {
                bReschedule = true;
            }
            pclCurrent = (Thread*)m_clBlockList.GetHead();
        }
        m_bPending = false;
    }
    CS_EXIT();

    if (bReschedule) {
        Thread::Yield();
    }
}

//---------------------------------------------------------------------------
void Notify::Wait(bool* pbFlag_)
{
#if KERNEL_EXTRA_CHECKS
    KERNEL_ASSERT(IsInitialized());
#endif

    bool bEarlyExit = false;
    CS_ENTER();
    if (!m_bPending) {
        Block(g_pclCurrent);
        if (pbFlag_) {
            *pbFlag_ = false;
        }
    } else {
        m_bPending = false;
        bEarlyExit = true;
    }
    CS_EXIT();

    if (bEarlyExit) {
        return;
    }

    Thread::Yield();
    if (pbFlag_) {
        *pbFlag_ = true;
    }
}

//---------------------------------------------------------------------------
#if KERNEL_USE_TIMEOUTS
bool Notify::Wait(uint32_t u32WaitTimeMS_, bool* pbFlag_)
{
#if KERNEL_EXTRA_CHECKS
    KERNEL_ASSERT(IsInitialized());
#endif
    bool  bUseTimer = false;
    bool  bEarlyExit = false;
    Timer clNotifyTimer;

    CS_ENTER();
    if (!m_bPending) {
        if (u32WaitTimeMS_) {
            bUseTimer = true;
            g_pclCurrent->SetExpired(false);

            clNotifyTimer.Init();
            clNotifyTimer.Start(0, u32WaitTimeMS_, TimedNotify_Callback, (void*)this);
        }

        Block(g_pclCurrent);

        if (pbFlag_) {
            *pbFlag_ = false;
        }
    } else {
        m_bPending = false;
        bEarlyExit = true;
    }
    CS_EXIT();

    if (bEarlyExit) {
        return true;
    }

    Thread::Yield();

    if (bUseTimer) {
        clNotifyTimer.Stop();
        return (g_pclCurrent->GetExpired() == 0);
    }

    if (pbFlag_) {
        *pbFlag_ = true;
    }

    return true;
}
#endif
//---------------------------------------------------------------------------
void Notify::WakeMe(Thread* pclChosenOne_)
{
#if KERNEL_EXTRA_CHECKS
    KERNEL_ASSERT(IsInitialized());
#endif
    UnBlock(pclChosenOne_);
}

#endif
